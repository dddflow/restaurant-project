-- All dishes with the corresponding category and name
SELECT
    D.DISH_NAME,
    C.CATEGORY_NAME,
    D.PRICE
FROM DISHES D
INNER JOIN CATEGORIES C ON D.CATEGORY_ID = C.ID;

-- List of the customers
SELECT
    P.PERSON_NAME,
    C.DISCOUNT
FROM CUSTOMERS C
INNER JOIN PEOPLE P ON C.ID = P.ID;

-- Orders
SELECT
    ID,
    MADE_ON,
    TIPS
FROM RESTAURANT_ORDERS;

-- Waiters and their salary
SELECT
    P.PERSON_NAME,
    W.SALARY
FROM WAITERS W
INNER JOIN PEOPLE P ON W.ID = P.ID;

-- Среднее между заказом и подачей (надо проверить)
SELECT ROUND(AVG((S.SERVED_ON - O.MADE_ON) * 24 * 60), 2) AS "avg_minutes_to_serve"
FROM TABLE_SERVICE S
INNER JOIN RESTAURANT_ORDERS O ON S.ORDER_ID = O.ID
WHERE S.SERVED_ON IS NOT NULL;

-- Тут я проверяю триггер который вычитает ингридиенты при заказе:
-- Было 14.60 ингридиента пасты
SELECT
    ID,
    INGREDIENT_NAME,
    QUANTITY
FROM INGREDIENTS
WHERE ID = 201;

--проверяю новый триггер trg_check_ingredient_stock
INSERT INTO RESTAURANT_ORDERS (ID, CUSTOMER_ID, WAITER_ID, MADE_ON, TIPS)
VALUES (6003, 1001, 2001, SYSDATE, 2.00);

-- Добавляем 25 карбонары в заказ
INSERT INTO DISHES_TO_ORDERS (ORDER_ID, DISH_ID, QUANTITY)
VALUES (6003, 10, 25);

-- теперь карбонары 12.10
SELECT
    ID,
    INGREDIENT_NAME,
    QUANTITY
FROM INGREDIENTS
WHERE ID = 201;

-- SQL QUERIES FOR THE REPORT

--Shows the 5 most popular dishes in terms of quantity ordered.
SELECT
    D.DISH_NAME,
    SUM(DTO.QUANTITY) AS TOTAL_ORDERED
FROM DISHES_TO_ORDERS DTO
INNER JOIN DISHES D ON DTO.DISH_ID = D.ID
GROUP BY D.DISH_NAME
ORDER BY TOTAL_ORDERED DESC
FETCH FIRST 5 ROWS ONLY;

-- Ranks all waiters by the total amount of tips they have received.
SELECT
    P.PERSON_NAME AS WAITER_NAME,
    SUM(RO.TIPS) AS TOTAL_TIPS
FROM RESTAURANT_ORDERS RO
INNER JOIN WAITERS W ON RO.WAITER_ID = W.ID
INNER JOIN PEOPLE P ON W.ID = P.ID
GROUP BY P.PERSON_NAME
ORDER BY TOTAL_TIPS DESC;

-- Calculates the average number of minutes it takes to serve an order.
SELECT ROUND(AVG((S.SERVED_ON - RO.MADE_ON) * 24 * 60), 2) AS AVG_MINUTES
FROM TABLE_SERVICE S
INNER JOIN RESTAURANT_ORDERS RO ON S.ORDER_ID = RO.ID;

-- get customers that had made order but didn't leave any review
SELECT DISTINCT P.PERSON_NAME, P.PHONE, P.EMAIL
FROM RESTAURANT_ORDERS O
INNER JOIN CUSTOMERS C ON O.CUSTOMER_ID = C.ID
INNER JOIN PEOPLE P ON C.ID = P.ID
MINUS
SELECT DISTINCT P.PERSON_NAME, P.PHONE, P.EMAIL
FROM REVIEWS R
INNER JOIN CUSTOMERS C ON R.CID = C.ID
INNER JOIN PEOPLE P ON C.ID = P.ID;

-- Top Customers by Number of Orders
SELECT P.PERSON_NAME, P.PHONE, P.EMAIL, COUNT(O.ID) AS TOTAL_ORDERS
FROM RESTAURANT_ORDERS O
INNER JOIN CUSTOMERS C ON O.CUSTOMER_ID = C.ID
INNER JOIN PEOPLE P ON C.ID = P.ID
GROUP BY P.PERSON_NAME, P.PHONE, P.EMAIL
ORDER BY TOTAL_ORDERS DESC
FETCH FIRST 10 ROWS ONLY;