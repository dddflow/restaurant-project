------------------- TABLES --------------------
CREATE TABLE PEOPLE (
    ID NUMBER,
    PERSON_NAME VARCHAR2(100) NOT NULL,
    GENDER CHAR(1) NOT NULL CONSTRAINT CHK_PEOPLE_GENDER CHECK (GENDER IN ('M', 'F')),
    EMAIL VARCHAR2(100) NOT NULL,
    PHONE VARCHAR2(20) NOT NULL,
    CONSTRAINT PK_PEOPLE PRIMARY KEY (ID),
    CONSTRAINT UQ_PEOPLE_EMAIL UNIQUE (EMAIL),
    CONSTRAINT UQ_PEOPLE_PHONE UNIQUE (PHONE)
);


CREATE TABLE SUPPLIERS (
    ID NUMBER,
    SUPPLIER_TERM VARCHAR2(300) NOT NULL,
    CONSTRAINT PK_SUPPLIERS PRIMARY KEY (ID),
    CONSTRAINT FK_SUPPLIERS_PEOPLE FOREIGN KEY (ID) REFERENCES PEOPLE (ID)
);


CREATE TABLE WAITERS (
    ID NUMBER,
    SALARY NUMBER(10, 2) NOT NULL,
    CONSTRAINT PK_WAITERS PRIMARY KEY (ID),
    CONSTRAINT FK_WAITERS_PEOPLE FOREIGN KEY (ID) REFERENCES PEOPLE (ID)
);


CREATE TABLE CUSTOMERS (
    ID NUMBER,
    DISCOUNT NUMBER(5, 2),
    CONSTRAINT PK_CUSTOMERS PRIMARY KEY (ID),
    CONSTRAINT FK_CUSTOMERS_PEOPLE FOREIGN KEY (ID) REFERENCES PEOPLE (ID)
);


CREATE TABLE REVIEWS (
    ID NUMBER,
    REVIEWED_ON DATE NOT NULL,
    RATING NUMBER(1) NOT NULL,
    REVIEW VARCHAR2(255),
    CONSTRAINT PK_REVIEWS PRIMARY KEY (ID, REVIEWED_ON),
    CONSTRAINT FK_REVIEWS_CUSTOMERS FOREIGN KEY (ID) REFERENCES CUSTOMERS (ID),
    CONSTRAINT CHK_REVIEWS_RATING CHECK (RATING BETWEEN 1 AND 5)
);


CREATE TABLE INGREDIENTS (
    ID NUMBER,
    INGREDIENT_NAME VARCHAR2(100) NOT NULL,
    INGREDIENT_UNIT VARCHAR2(20) NOT NULL,
    QUANTITY NUMBER(10, 2) NOT NULL,
    CONSTRAINT PK_INGREDIENTS PRIMARY KEY (ID),
    CONSTRAINT CHK_INGREDIENTS_QUANTITY_NONNEGATIVE CHECK (QUANTITY >= 0)
);


CREATE TABLE DELIVERIES (
    ID NUMBER,
    SUPPLIER_ID NUMBER NOT NULL,
    DELIVERED_ON DATE NOT NULL,
    CONSTRAINT PK_DELIVERIES PRIMARY KEY (ID),
    CONSTRAINT FK_DELIVERIES_SUPPLIERS FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIERS (ID)
);


CREATE TABLE DELIVERED (
    INGREDIENT_ID NUMBER NOT NULL,
    DELIVERY_ID NUMBER NOT NULL,
    UNIT_NUMBER NUMBER(10, 2) NOT NULL,
    UNIT_PRICE NUMBER(10, 2) NOT NULL,
    CONSTRAINT PK_DELIVERED PRIMARY KEY (INGREDIENT_ID, DELIVERY_ID),
    CONSTRAINT FK_DELIVERED_INGREDIENTS FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENTS (ID),
    CONSTRAINT FK_DELIVERED_DELIVERIES FOREIGN KEY (DELIVERY_ID) REFERENCES DELIVERIES (ID),
    CONSTRAINT CHK_DELIVERED_PRICE_NONNEGATIVE CHECK (UNIT_PRICE >= 0),
    CONSTRAINT CHK_DELIVERED_UNITS_NONNEGATIVE CHECK (UNIT_NUMBER >= 0)
);


CREATE TABLE RESTAURANT_ORDERS (
    ID NUMBER,
    CUSTOMER_ID NUMBER NOT NULL,
    WAITER_ID NUMBER NOT NULL,
    MADE_ON DATE NOT NULL,
    TIPS NUMBER(10, 2),
    CONSTRAINT PK_RESTAURANT_ORDERS PRIMARY KEY (ID),
    CONSTRAINT FK_RESTAURANT_ORDERS_CUSTOMERS FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (ID),
    CONSTRAINT FK_RESTAURANT_ORDERS_WAITERS FOREIGN KEY (WAITER_ID) REFERENCES WAITERS (ID),
    CONSTRAINT CHK_RESTAURANT_ORDERS_TIPS_NONNEGATIVE CHECK (TIPS >= 0)
);


CREATE TABLE RESTAURANT_TABLES (
    ID NUMBER,
    CAPACITY NUMBER NOT NULL,
    CONSTRAINT PK_RESTAURANT_TABLES PRIMARY KEY (ID),
    CONSTRAINT CHK_RESTAURANT_TABLES_CAPACITY_POSITIVE CHECK (CAPACITY > 0)
);


CREATE TABLE TABLE_SERVICE (
    ORDER_ID NUMBER NOT NULL,
    TABLE_ID NUMBER NOT NULL,
    SERVED_ON DATE NOT NULL,
    CONSTRAINT PK_TABLE_SERVICE PRIMARY KEY (ORDER_ID, TABLE_ID),
    CONSTRAINT FK_TABLE_SERVICE_RESTAURANT_ORDERS FOREIGN KEY (ORDER_ID) REFERENCES RESTAURANT_ORDERS (ID),
    CONSTRAINT FK_TABLE_SERVICE_RESTAURANT_TABLES FOREIGN KEY (TABLE_ID) REFERENCES RESTAURANT_TABLES (ID)
);


CREATE TABLE CATEGORIES (
    ID NUMBER,
    CATEGORY_NAME VARCHAR2(100) NOT NULL,
    CONSTRAINT PK_CATEGORIES PRIMARY KEY (ID)
);


CREATE TABLE DISHES (
    ID NUMBER,
    DISH_NAME VARCHAR2(100) NOT NULL,
    DESCRIPTION VARCHAR2(500) NOT NULL,
    PRICE NUMBER(6, 2) NOT NULL,
    CATEGORY_ID NUMBER NOT NULL,
    CONSTRAINT PK_DISHES PRIMARY KEY (ID),
    CONSTRAINT FK_DISHES_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES (ID),
    CONSTRAINT CHK_DISHES_PRICE_POSITIVE CHECK (PRICE >= 0)
);


CREATE TABLE DISHES_TO_ORDERS (
    ORDER_ID NUMBER NOT NULL,
    DISH_ID NUMBER NOT NULL,
    QUANTITY NUMBER NOT NULL,
    CONSTRAINT PK_DTO PRIMARY KEY (ORDER_ID, DISH_ID),
    CONSTRAINT FK_DTO_RESTAURANT_ORDERS FOREIGN KEY (ORDER_ID) REFERENCES RESTAURANT_ORDERS (ID),
    CONSTRAINT FK_DTO_DISHES FOREIGN KEY (DISH_ID) REFERENCES DISHES (ID)
);

CREATE TABLE DISH_INGREDIENTS (
    DISH_ID NUMBER NOT NULL,
    INGREDIENT_ID NUMBER NOT NULL,
    QUANTITY_NEEDED NUMBER(10, 2) NOT NULL,
    CONSTRAINT PK_DISH_INGREDIENTS PRIMARY KEY (DISH_ID, INGREDIENT_ID),
    CONSTRAINT FK_DI_DISH FOREIGN KEY (DISH_ID) REFERENCES DISHES (ID),
    CONSTRAINT FK_DI_INGREDIENT FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENTS (ID),
    CONSTRAINT CHK_QUANTITY_POSITIVE CHECK (QUANTITY_NEEDED > 0)
);


------------------- TRIGGERS --------------------
-- Trigger for updating quantity of ingredients after delivery
CREATE OR REPLACE TRIGGER TRG_UPDATE_INGREDIENT_QUANTITY
    AFTER INSERT ON DELIVERED
    FOR EACH ROW
BEGIN
    UPDATE INGREDIENTS
    SET QUANTITY = QUANTITY + :NEW.UNIT_NUMBER
    WHERE ID = :NEW.INGREDIENT_ID;
END;

-- trigger for checking if there are enough ingredients for a dish and
-- subtraction of ingredients from the storage after placing an order
CREATE OR REPLACE TRIGGER TRG_PROCESS_ORDER
    BEFORE INSERT ON DISHES_TO_ORDERS
    FOR EACH ROW
DECLARE
    V_AVAILABLE_QTY NUMBER;
    V_NEEDED_QTY NUMBER;
BEGIN
    FOR REC IN (
        SELECT
            INGREDIENT_ID,
            QUANTITY_NEEDED
        FROM DISH_INGREDIENTS
        WHERE DISH_ID = :NEW.DISH_ID
    ) LOOP
        SELECT INGREDIENTS.QUANTITY
        INTO V_AVAILABLE_QTY
        FROM INGREDIENTS
        WHERE INGREDIENTS.ID = REC.INGREDIENT_ID;

        V_NEEDED_QTY := REC.QUANTITY_NEEDED * :NEW.QUANTITY;

        IF V_AVAILABLE_QTY < V_NEEDED_QTY THEN
            RAISE_APPLICATION_ERROR(
                -20001,
                'Not enough of ingredient ID=' || REC.INGREDIENT_ID
                    || '. Needed: '
                    || V_NEEDED_QTY
                    || ', available: '
                    || V_AVAILABLE_QTY
            );
        END IF;

        -- Вычитание ингредиентов
        UPDATE INGREDIENTS
        SET QUANTITY = QUANTITY - V_NEEDED_QTY
        WHERE ID = REC.INGREDIENT_ID;
    END LOOP;
END;

-- View for derived attribute "status" of the order
CREATE OR REPLACE VIEW ORDER_STATUS_VIEW AS
SELECT
  ORDER_ID,
  TABLE_ID,
  SERVED_ON,
  CASE
    WHEN SERVED_ON IS NULL THEN 'Pending'
    ELSE 'Served'
  END AS STATUS
FROM TABLE_SERVICE;

-- View for the derived attribute "TotalPrice" for the Order
CREATE OR REPLACE VIEW ORDER_TOTAL_PRICE_VIEW AS
SELECT
    RO.ID AS ORDER_ID,
    RO.CUSTOMER_ID,
    RO.WAITER_ID,
    RO.MADE_ON,
    RO.TIPS,
    SUM(DTO.QUANTITY * D.PRICE) AS ORIGINAL_PRICE,
    C.DISCOUNT,
    ROUND(
        SUM(DTO.QUANTITY * D.PRICE) * (1 - C.DISCOUNT / 100),
        2
    ) AS DISCOUNTED_PRICE
FROM RESTAURANT_ORDERS RO
INNER JOIN DISHES_TO_ORDERS DTO ON RO.ID = DTO.ORDER_ID
INNER JOIN DISHES D ON DTO.DISH_ID = D.ID
INNER JOIN CUSTOMERS C ON RO.CUSTOMER_ID = C.ID
GROUP BY
    RO.ID, RO.CUSTOMER_ID, RO.WAITER_ID, RO.MADE_ON, RO.TIPS, C.DISCOUNT;






COMMIT;